# 大大鸣版 酷我音乐脚本
# 有问题请及时联系大大鸣 （有其他想要#的脚本也可以联系，尽量试着写一写）
# 环境变量 ddmdl 代理url txt
# 环境变量 kuwo_mo 账#密登录 
# 多账号 使用&   例如：账号1&账号2
#
#
#   --------------------------------祈求区--------------------------------
#                     _ooOoo_
#                    o8888888o
#                    88" . "88
#                    (| -_- |)
#                     O\ = /O
#                 ____/`---'\____
#               .   ' \\| |// `.
#                / \\||| : |||// \
#              / _||||| -:- |||||- \
#                | | \\\ - /// | |
#              | \_| ''\---/'' | |
#               \ .-\__ `-` ___/-. /
#            ___`. .' /--.--\ `. . __
#         ."" '< `.___\_<|>_/___.' >'"".
#        | | : `- \`.;`\ _ /`;.`/ - ` : | |
#          \ \ `-. \_ __\ /__ _/ .-` / /
#  ======`-.____`-.___\_____/___.-`____.-'======
#                     `=---='
#
#  .............................................
#           佛祖保佑             永无BUG
#           佛祖镇楼             BUG辟邪
#   --------------------------------代码区--------------------------------
# -*- coding: utf-8 -*-
import zlib,base64,marshal,hashlib

def xor_decrypt(data: bytes, key: str) -> bytes:
    key_bytes = key.encode()
    return bytes(a ^ key_bytes[i % len(key_bytes)] for i, a in enumerate(data))

def decrypt():
    data = 'DxI$qTm^5Pp^d*aXkU_+*~;p&A<uhrxn#0It@4$)4e=)D<y^0BJndl-dh=@bcsvqiFfnW$1Zy?T0@x)qboL(_wWwTAQ_lYAbNr8@JfD<UXiJB?i+ZCN4i|gc{3(m$Dw3v;qJqv#2xD(F@PeP6GbWLd^T2b<Xfx6>rHh@;b4od|%GOsFIeb1ijCu8CDwOmo>aNj!RivZgd11Ow!Lt+4MTqx5AQrBg{z~{Qi$2J^E-w#??PWmJxxp450Q;YPI4<=8cCh^CnteGC8)0Uyfm$O>`0XFO^|Z03%Fv8VvL8b7V}V6D^Tfkt+!%%b<L9&Mt}p?`LXCG<ZuPPB_Bt9ZF7)#Y(LxZILb3n@tya(|pq2|#A+6BfWxvFVQQd2QnY$!wyaf*~_x106)gjD}c@`tSU9ZENCqlO;H?e@V)<S}hHXr#-Xo{lN7N1XkS5@q&R?%`c9hFX4<9^FjNMty7=e;W6YoS|@C*?O?>u-!RQ?N+MQbnw`=xKvg4|c2^AtkySr<-Yja(GM(LK1GVw3}ewk<4MbLds?}#UOXKd{=k&6R{t+MM>A!LC8JuZRf+zu+ZBW%&I5zx7T(9pXB=D@4EGQGUw*TYsvOR>@~{g!`^d(*ax{w*SH`6JHI*K$nbi45a3*1aNEwKd0EAvhV2qJY^?v%#3x>ft{J3L9%zHY#*ony4n`9~UGC_>>2$~!?(hQ!_F5E+=#&5&8JJQFsoDoKFbF-7q(}t-sEO~9m3GAH)+?8+DsXjQc8HbcrM@G&iL$1MwK#LO)9l)(e4&Jd-z?sW#SbD#SL7SsvAxSSf?@b0wZjoo2ZZs%eRK37!FfK3`Rg#J%p4|UHeJ75f9doeMl=3bL#?+6pu2JEw+-=$tL2J`@x81g8Zcnn;7eyESh<wp6fC37kThQm`FzJsRrqK5yu3bU=i83UhniTL{mI<NO`F$*OPllZ7I?FcgWam5{ArNx&lp|W$~cwIJ(!vXrtZJxNRv&UpOcn>{jBV#V!(``w{j3q06PW5=S#SR&7N-LjD_yrn@o|Ki|Yl-ew_vi_q09|&^?0HuOorrfzyKADOSy=hAoRJlv>Al`4o>2f!uK#KkO@kOvve(cD}`i(Q}8aiIS!9)Jo`AF)pJlsSb6R%#v>P^AUT^#_pY^fbk(eD~5Y{ct;Abm8)k?-sFOz*xF8!d=D?Z1q%ZJIBFVfkH`x2idico8H7MK9ckrm2Fp*y3Mb2QXcFQotqbtE=#wX7!Dghj{eQ2Q{Y~F^*nWN;tGnFFwb8%D;FOOe7n56>whAYIzqwP`2Td{e)GAU5H`{?H67_4H2GctFuT<W%dkHoK2sX7kolo89&!=F0812HmHiA&)B~L~1w+$}INd&;J_j5Y_6jz>i1Rak{nT!1DjbS4-yp<jNL-2;Y0?vTXv&K`V_lb$VATD}2<GW9vt61bZ9%E_(y+=E9-$?FJzY9X|g>vYtJys6r5ho-L7R7&?IB#Qe{79%kMkaf)soJTvC~(ewGt_)-(Z?sQc12g}6t(s>Zc-^#CLqc_QBn^xUSs#7<R_>-t#p41enjDsFre!7O+c{YPyQaXeam14(MQ*9McvI*LGuRe?6WP?;!pZzx?4y4HsbPcbLSxx^TXYJUO>J37GDeM!ZS=W@In3!%)&914Egr4CmzbXbZt?ch}#mAE8$7Fq2L0>CSZF7f3inM61rPr=`QsRbp9V-C!~om<7J}BeBD^}&`dLq>wK@K2sHOT-*-vEY1|Yg5<e&=1Zd<`M?qEcbv^dANms#stROBGNzdXYXpj{(7OW|~(C2ioRDC?Tab*LX#WUL>Sahno32p28Ko>#EBW5l5-2krxGIn-ucsmDOe32I14#($0<u;@!U#v`d2%~cP_qJtzqn9V|e9^QJSa-@-UrAmHR^ADB)=1ydC<S7>HB}`_#G3HJvaYn^No(qs&I~0G1WD^z<j6=T?4XqMLX?Pqw@ri{C2{4lqxVg1rHg6`PtdJP9%60!tOEPY@?A>B5;e^Yy15eMrxdApciHqM1ydCrjQKk4189DPsKYA3kTH;vaqq<3OpZtRl@1Fg=kZcml|pzv7UJ`Lxt>jUYg=zXl~zUMd$vx9LG;l4t?+O20vxG#mI$dB5_vUfl3iEWClA6_N=bQyytbah3?@e;>)I|cG$vWTSKK;NbR#QtQiS3Lx52__Zb&#93dO`eL1rKZu4UY}esgW+Sii8WhUMW5_mrtx#ZrHZQ2rKmmZ8i%)xhyZ%URWlzY_7rK9&|KI{VBj>I6Bp$Vyt4534Xls$E63d|1ve=C3$~@quw;YoRLn&EaGZHxF9Z%-hphRpBlV_uhN{PTGkmsx?w_Hr2-ZIs^gIl%7SJX?9QVD{nUAtRXtBCX5hue_DM(biv~*AbNEE0=oG4j)XpDV~oq&HY2Huybv^WDs>8=@q(ZNDvu^uv9bb_WMEaV(#PB~Y&=jJoK*@K3bOUF<6=LHH;E$Lcz!V%Z>L3_51}^<m7=#`p3<wD?(|*!Lg41TqFacz6`0{K0x`GcOr^g=wQ5C*lfI<4v^C}srZVf26_hym^o@*VU?kp$H9=~L0Wm7#!M<%WA`02XX98-^bP2szjmvSRht*G(qS^GY(Y4DscIv$uM)3%+^laalD?;WQn?7&k<Vk#%CawIUnXwKh#U4l%(2YM#**E_=(UE4v&~&b|aQP4V*&9Z&cEmJ5NQc-HW=m|dDQa^PqH`6eTG*wngoV95%a%`q75v`OeoM>+3N~tNRbAxMYeGcmN5L61I_A(J-iYO0pbq|9HogYBYx@w~-n9Ii|Af~X9PB>%yJ>_Gy~q((a@c?EB@D|2;wD2^-uEBal9yp_03AZBV`#^2&}w|@)q=!uMPRHHWdN>risLsL>2EG^k`jEv8FuL-^V)HLC!yiYwTaY%@ngbnQx<6r!I&(8;Y$J`p|)tw@yXAl4q!0e0a2MOWuDzc-J&MvC}!)HG82?a!z1s?Chx^~N$+(9n?<BY7Kd&(uifTLj~wv`_%hOR%86M`uN?~_abF~!L-$jkl@~Fah~(tn9rg5EGCgTLd<|Yr?`HqOA88I?-8O;J4E^+w`AB@R^JC@|X5D(91N(i3Q}g#|pd<98YP1PFeV+ChN{u7FQE|NDLP2g8`w_zI^wOldf0aXB8Gu&bhasg4`5~(^%%ro$Fq6>dZMD1wrW*7SDT4C@MSLoAIuun3?`x{ff@v!e=LJvbCKlETAft^8Bc<w>OMmSN5s0YCC%lPXB1=PWcbhlef$=3$e?hdN1my8>bQ^9Yzw)}l^aX0;v`ph>`OnLKapgtJJZ??GcAz#-tuT`Sw`ajRELFR_Vx`9G8if4QnAoKfJAc8)cC3tyu2GjXcwf|{*IKSS55`WClL7z$F0I4ODM=M^kuiA@O&3feimLh|L-L9c{HOLah`2Do)EwCcq9JMN%EPRBF_W&DvqA*XQpKL2!%At;tERYrt(z~G@l0}FJspbFG7nTRPE8V<XQV2Gp~oiY?$4$ra-@Jd)tvdf2x6H3KGDI>`aijBfpeK$qRY$jF1kMHlSn`Z1$Lm92Nk%LZag?2+{U?ResyNC1kMh8YJZ*^Su@<VWFYvwkaz-8@>7fu&&%eurd4@__%)Lj;$<B9Sp(3nqr=fNgc!H<sT=MLcT@)RojRi5NSbT009#e&0N2SFZ#(_2CYA7ODxI*^`fy=QfOQ?;68Wbu(XzxHdIX3a(4s2IgEmuIaq~I>fstFoFH~NcgxvOv_-X7mZ7G5x=?#CdpSvqhhnJ_&#~8lJ1-FrA1!kMg`I@j2{gxMl6bQ*&^l9zIoW_zh8EjHBp$l*%Xesb?1(X3fSL}F82a~so)#T^(G_!L|144oN2i|pTDKr!)6z!XukGV9GinukltgnObzm+7e@cx37&oS%i%!PFEof#@>O^oBy7+5r+-BJ$WKpA`Ml}^A3;26Y1XX~vsTG!0W+HWxd+_*ah2^1(U|4tQHn2WtONPI9)U9dXmQwmp>mKU;!sQ^6WLQju3f+XlW65YA+V_2s#^c+${6R+(eO3ZdG4BbRXJoNJ3)$w7iXggnJTdLj^#XQO%9}G;YCMMZ8zE?3*yTvF;+U8SnljmPhU48UJzX|ARM3*U~b@q>tq+wn7bLbXCoDZ~<POTQ8=+Ff_4=1?dQv~XR9irBOWOBg#r^IOlQ=b)OsJCzEKll1Le>ifRI$^}*7$%X>3GDJ)R!YEbKX@Mfxh&9zST<@}c2s5+rzkhx9Ad#Yqtr(TS_a|z<~<h!)@`{M1M)%mYC`9+pN1OhnEB8?O%2kxYwxEb%=c1#8O+5@ia~~z72MP1ePV8oVOoNv#E5kil<dM$6&>l_l|($`<k`iFAEZe?nl^_>@AwaSHSu8&*j}0XnQYR%!2eXigql{K2X0Dvztt7L1038#!(=7DO;a#Rm=wZrq{QLO!^gYxFSPrGTl{lUJNFUSy&Mh5E5Oj>EfLW^hlhYNS1dX=%g-rXn$RR(aRMc(jJ6avi+w0MZ$c0zB2<)F=g34L2>u1DAk(tc-&C#WVRT399L>W$fp_&u7a~1}`x=%y)UH|@@#Z$R3$zmDc9&72!TkN1UdhdGoheTCSsEAe7GvnZkX#MRa!{`d)d$rs-pkqPcE9o*FF*IW+qv~v4?r_hk$}JlSI)rA{ierXpew{V2RS&S)q}gQL)@tP-P64LTI<M*!`yw9f8b6#<|5No0WD)`;;R0j!4!2j7M`ZaSX4Pv{Gpuvj%iF68{8EeJkdosy98b&#dauBetps}{K_yYbgH}*ZI>-A`aH|dZ|7sXBiAi&lL57qplB0oMd??m7kH*_x`><Ts8twk0~SQwtT;9PK~f=JlBKf!elC~RgMbc$CBY~RRC2~$08M;OAm}{mxJrU5o=^GDm-p;TFcrBlv)ghq;%a^u?ocW=x%A$}N9<fWC02nWDMpJ<jm!zO_byy$-<Bzq)!q+y7iQ=;lAaxlAaJ{?egsd$F@^ybOk_JfNRIgdSX}j*=xWK=n6f0O(^D&}eE2dm4xz~3PigoA+FLxPES#**)Dc60e~st_Z&66G1m)<*p9xh@l!B)zyZtJ;9KXB{n5kJY@s6MO)`rRmKLq-DOT~bY5_~SDY=EN%&40Ju)1$nh?PW2tTw{AXXB+^}fD1JMNXWL=YBQ1V;GDzk@(0K^f=%>d+SyPcz|z>&WEO&E;;floDUqlv2G|G{rNAXKca|nU3~>+~>A~8^=aXmJXC8U&Q0``n9tW~Z5b{%ce0qY~+8gf2D>Hdr-;_mu<2prX$_UASTqUE<a638=XZgFrm^R4V;-?ZftYvFA&g|JySuMp1#j(9eQ94+ZHh!c@gp<+Hvs0yaOGhCE8FgXxLCY60)r9ghi8+neJh1MJJ*{;+gVYn{z99~IFAx32xYJAxTSruHWwYwZe6tBu?^cp2Ar;|v@d$kON#Cp)VmjeZE%IO;_jhmJDcRgsBf_laPk91Uk>1|O>GTE{5>pPU2SbA{#ycRO3S6ESkR`fF2<C~r0>dbY*(8h^gV3(;TBfmjtr@acVP@t<d_9wI7v|xAi$zp5*Ok5~613nt?^P@=OSP|!g@h#dxVQ=E2FCsS-|*O@A&}H#sgJGB)kz`$&;+&G8wD8mHhI5}q7_XSd27V<_7^=<1uPLfWT&pS#{Hmb^1^2b(XE}^e#AqNL-gQ5ellqQG@@$%KVRIkkdh}8R9S9kLlNt=l}~LSPo8shnp4@|iKpFjsRHzFf>>8T)c$=naFLi0WyNhJA|afH9F0I+VHGhIg^&fSLedzmWUNs>&XAf)<6fr{)mEtc>UG)<^mxO&(tot393%Q2xzmH}dj$<Vt-!l=NUw1!JXq8pJZSnP&?+XMz<5IYN|)?Ih1xjlNGZ`Aj&X~<)oeEL0$d;oc`NjQK$jyx;N^zzc)3<n{m}t73I^r;^C0O>y$z{MbfQ2}`ly{w5&W5{UP;#lH|vT~2g|mFfXmU^yXa*NSZVyvDk=9fpVgY!Y=ELMu?*2A3<NpA+>Wd0?%&%SwmG=&0n5gpc=P$KPVk)JEMP7*Lm=Wgzo9mcs}XV>bjI$=GS(C75KU#&M=_bPX)$HS`~B7Wvx0p;*E`WPU)MQYjw`0X+p^IGiT;kV0lvn?s@ZAuWdjRBo*JSU;bvqA6le~#&g!4%?CBjK^FW%3mvMix^Za)&7bG*bUPIjL2m@bI$psY$DRLb=JPE`-^T{Cp=u%V>H#{yi*5_m^6fGF7{&0}Cs@cQk{=F+gLE2@&Zw53F_d48jU)f!H6uICHH|0FSrb`3MWRqmf2eSPs+Vz-L(lIyPtkoo9TiZ;5YwA=huE5qjnUdpSMe~A8nz}wt_lWI<VJWNO)aM?Fc8t_Z;G6f|1Bt!@m$iALL+KnaInxh&GhgA68B1@h`#P`u8h3@#f`K3uudd$NMW0-TdyfX96mo?ZGwA33i*hcOLEKxxbW;P1{-NrEp_1DhkW<cNsYzN!;)3lZO-52lDP>**aaX)RDpe&GPh%^wOwbWFZ)WWd#X~GLw7frl4Phccb5T&ga*KDXRC}|p2arpaPPuUnPl|*Kv24=`CqveTQ!uwBe+bpRj2O{FF#3S^pjkMdz5qbl6f?ALe<I6q=aOV05Xbh|uEz#=M-=$Rs6BsN$R69pSo7pw1|b`XAt#U-z=k(!bpm<3S<Oue`7D^i$q+bIMtN%DUrA(sJgpohL_$u5gTB*Uvo-u|vgvN)^yuZ`S_ws<rk8PqX``35Gm=F5E$a3yr)=;<I?Ua@01G|<yRM1lB|Rzb6&~O5I8toph~J@<NCs?KFksl#Phrl1l`8hT3s6|!!0)7Xsc#`R?|a=xR}?U-j7U1Qa6gu9jV4zr4`l%JQHxIMHu%{kCO#XrzYDMcNH*ftgctw!xY3Ikp=4vI{%bnGsNb6fD6>#GbvT|tdE05&*R<zCI(~^`!O2nGkAcW9`F2c_q<WGEt-GT+{VLkmAzQazb1|0i7EjU%2z+BMfTeEBOK6g`zO~hmzq{+F;h(s|`dR#i6{`CAtSyBk=BZ@~!r-uqX`qMm$|fl9v=@}Y!bu+jn3WOFzTUo}ban<<X<3b`SBk^k_OG*H4ywHv=7>YizEMG0+JlIOJiI&?blDIeUd(?VuF02Mi?*1&1ULY$AX^ey!T5L5^>ooBewv0GFyX;@anv5{?i$S|Lj0E6&Bq(a9XmSxD<HQI?BmtkAtc;{3fNEf4s$femv!z>bRKwcmEl;@PvezgHFReu)`}}zxOZqr8n4RTx-&Ub{{&;CHOyhlMTKK5z;eVRv(X0gA<7AtQtaVbO5DJPkq8)R%F|lZ<keL9oNdj>-dqK)kG}7NiKiovRhh@JWZf;Wj?q3I#BRKU{oCTJ3B0{fs6xBs#{nOr3!<_4gKA~D-e{LeqqO@zsLI&mmK-GvTKf#ycQ;>enP$`!RpX1l06&wET(X0RQl#7BYl9x_;MTaEOm=5C>r00b$WwM%mQe=ugjhyXpP&S*({M#yeUV6W&{4WEU9b<hCE|aOBBxmK@^aH`04-DP9Yv9#eGl%hg>sO1s4Y&a^!j?LfD5~}wwJEFJSS#0FoL;^lCEMciZXz;#mQ?KSii5rtUZ%e@|pC?2#%X(ki)DCqSNt{0JX*&?Z6pa+Zx@>^F%E?U&GM;T*$FXetOJdq2QJ;S=&q=LiAs8v!T;aQQexUUb@a!5I3RUlgF2cIk1e+g3rkkL-oVLQ^iMYSSie!I3_uC3RSVivMBzvEx((^=rk-kkGQY{zJ4LAss$EXD4!g=#y;V@-8?PSYPJ`>k{gDPubkGgtSkH7T@K$VI2=xc3}~uXei~rS<*jaD7;1zMvQluZ9S;&+#XZ1W<P79r>yx-1y7u9??Ee|B@5_gW{`J_68=kZ5$0wd{C`D_->(@Jo52{lRYrrX*#*jJy|B#LBvKONZH_29>rIt2W8ABhY>0yH>I%)=Npj`jRZ>lc&wEsGBHZ}X*8%cN63mZRJJD`t!>0B3DtvevHzCa@bdTAM}yI9f7{aO->ub(I(kZyrjfc<+yNLTPgQS(@sDJnss;0-(r)(@+1zsLS6J3ti7v|)?H^pOiX2!X~|uE3rORPdTe13Qy!Nd@&p^QdB;HB<mrb_d9oiCz?nc)hORBBwp2!{`p2*wo6u*5E|innp=QAX4R>M;i3KRrT+`WX(T9V)Q2QHALaK9$t}sQI_5aRq01nTdwmQZ$ndv5#%vN`(Gx$B6oo2$uX~j4o8ufY31FH-s?-qyYb<9t>K2e(UFTO%$r(p>>^llYDZ*gDd6bamMo<na{t4X%z&)HFe;0wG`088W2D^HCaRB|a{_8g<xNs#bw0kkYGu+SvZcHSrWfXi`uSX>f!ZO-0R+9H9Le8D2hcD6wD>@g4Qb2nmKTP(YqGUg?#e2d)%8<ebe;UOr=&ZRjpI#JBD9$r7(qS5XbH*e{cujbzE~D~;=1;s4NYA3d;%xFmrk2MgNl)C7!kydX}@4Rp+w=Mnhi<XgSXs_`Pq@T+23&*;0?1=JlL+DM17;hfw%~0i!&;tz3g2JaZ^<Bbsg=$+BH)bn5+}m(0(26@sn-@Fm=#Xs6m=P!Qi#x#zx!J6w~#G`+J6)49-sAWw_tDP>40pC3l}dA~W+mRS>~wjTwriK^y^fX`fAB&iP1XN%gU-BCqBu9&LsH0gVHni`syDE;`9@<5ff6wIZ%CcI6?<FyKMccS+vh|1Wg<|El*^egK%%J<fV>05!>0h9V1#*mrab8*=pFDPB9WU9Ioy4#%+&;L6JXoxt7vz2O;&*pq!Z1>xn4k2~7A8H4q@I9_%d?GFe&rOlZCZx`(k@P<wUypMCOWMD-l8%LWwX{ana0va_?d$&CAhB>}+?u;R#cicJ}n5wu$>v3065Faur`e}<XMj^7Y8i!UmlQx#hHWihb5$l_7RD{yto4)%Bf0}Er#?6*$s?au>|62r_pWd0l)T|XB>#0(xtxBvmD_H!c!^ISKA4ap?xY)NHqA8!M-FShy&W)(H^S6+TXsjI*9!n2$=Z#mXwEIPinvg;aWt!85yZ{;#pv<{Zs?X%CI|9Ba9IB%kiEM^mh_oj>kVbAV(NE;_+2pCs8XO^g0q;Xr^~BRtG}Xl;FlC7S=SLecP+Y>TB(&zIZAo_NK^0;0L##In87xW3MwfZ!R%2Q?Z_=egAK&RXf>}lYB6Obr_IbrTQaxY9GDLD3=!Du399D?C7Wr4-CXOD&GStUY(WlGv{|N}-a@P>t7E3q9+YYD^7Z3NovPjFR#-oEhBm{b)(;aT=yF2IIen_R4mAx=p_$YMK27YzoR+pXa)@a6=2qf;Z^1;^MF%I+ru6HTm50B(=(M~99npV9aFY1Ew?*MLY!XHEAw2|B(q}U6IyibcKRm_5zBWT)CPIOZu>cM)S8V|sB5&`i}1eg|}V`t%Fa3DHOw_(UUh^*CXO>qpnFMJpv)UhhKH5~(Ik2;ro^Kpd$&7D@8V{Mz3p0Ni_pDw2<bh-b7I}I6D9D0nKX(I<J@Ed{MqpXDDbkJp+1mT0E63~N*#=U@ZVyv=^v<mWC-S{UhG_?Mzhj#$Y?=90zFhae4xWvRzWUCP&)+}?377`MN_hL-{r?_#xSst5_;{|{b7LC=S(CUrwYmk=7(j>@+fzi2FAmMO%A#O$_R&g+hTvBurbxL+FRjP;cQ8@L>zusS~joQYBoUAE(^-kitv)Z`V7ACuu((W5iS~E*aL;vAnkhV_!Z>6=yxTm?!T%UUM%H~7>|LmOw9yDx>nc0sM37p;&H-vjqLv%Gk7}C-`O!8K$r5S~0@1f1`x}g-GkoAv;yRZ>nyPWBHfDTpzyvg^Nkv<RkSiE%a<pLVjcHb|Lo!V2yjdDS%OObkmOzr>TH%8URvDOzGeY<k%5+@5R^^gMHA!-zSebCg8k4qHxp=%mpVLf26>WRCB7`02t*zQM>Jtonht&AcBL5OA>pq9Xy=R|}J|5h~&42m4Bz1MzoZ$51mlTm1xoF%Iu4*WPtWeb=<pPgZB%#?poK(aN!jXl9wa1xZ50KJB~CqtCYc*)c^UH}lU@^LKvul9&37gd#1T0E=mCr`toz&Y4IHC=(w2P(jexbc@+*5sATN3M_g^E%w+;4H<9^x~=p%BI*#rF^n@yHXX|vl`cX?r4*q`PuR@#UNnA*CEHI{}kJHKV~Sj2ez?2qG^!yt(W^-&59n+4$*{71w_#uIS%I6&>cIl{mgsl+J*bg?4;KlL%$Zfn$*jnh$<;&-Jj4qiMN4~)cV}8@6fNFI_@J0520fQN<qHUYmcMIfIvFpFzU!``7jyjf^yRmw+O}N9#m`rWGLbpSGqqV;r}^@pLb_I+KnNmYHL@y-J45b$W^SCT2*S0L=@(x4|O$&;(Is>RPhCHnF)Ct>9y%9ZkY|;;9o98UPv^dApp1W62Y73F^dK-RJ=!O3o~ey3{xe##W+jLxjTQQ68zLW-FOSA@(RDnKAMu~xIA`cRMHP<nA13pp9lHS%k6JsP6%=fq2Ycp!w=-kFaKb}7@Xhl!;IQV-rM0mrPX2BgUkpV5uyyw<vrg38+aU)jEmNQOxfqV!upnb7*$|i1IOuqrSa-ipaOL{gjs)+d(1F61LAk*1%4`@FMhW8;lY{z<VExJdxqb|{l_7JTnERvFzpI8H3$LtOe(SGQ35sXZk{)8a{wf3NdrxEW$SxC7ZUUTr__Y|FlmdWJF?5R!uFj!6<AM0siC!FAW-J2JxSadYcB+LVjW)#7=P%|BhtXU?C>&;qR--9W)Pc?!DwFR890_DN)wr<Joi=*oFq+KGfvS`l6`pzYIb@k*yX1ol)xl#=&~T_AEmQy<@e>fhA$(3!TzBYgn0+sbq%OY^oF~3xT`on%eA%>btIRKSS*_FQ*>P993q3_$-KdcDY>1%tK;cnd-lT_w@k)}ZnzopyqY~3ND#6jCWWo|Bk;^&A8a`NZUrj10{O$MaRGeL;>8d#^$>lZ^|)N^h~H*t_ptQ3zbw(MkYh26x(aB=pW<n3T=CH8*cjD|pzmO{uK8ml*y;$L4tfnbTXse-N^%J1hXr?9{pktF4$Psn0PXJq0{a&(s9Y+~(`O=}3#`}OIE~6<_^1cZ?8XT-jh^br5efkXv}0Q4&Z>fY*z~JrPJw*n5u&gi7K0eV;-$UwepgwqbFikD&ts-v%p{h4rHt^e5foq1aE@``B><3K6-`qKC*X_*8JH(bSrhku1;>E5i<L@(-a$ie0oMiL-``q7$Og>--Hr0A<`E0Wl<5q~@9xv92ABfW?pD|&v$E2J*xeS~hdTk<CA}TL?3=PXiJP>w0IsQl?m8I020eqDFIy5>hB(179*%$rgZxS;GZ#<Zpy|8ZyMx#!CyB>v7*5C~QVHatCBQe<?R$)Gq>>B8(F^wm+yU8ZyN9+PT|vTZa*Zz924Jx3fu1WdKPr^J0c9~)g1aRSGZ=3sM+fqPygxRnP<hN0Hyc&Nlxk0k&gB#t@S@2SExf=0{>^O+wlDO6a~H3y33^im?U%b=GBwk(Lgt`gV(Zn=xGpN)^UAgCW0B-1oBGhmgORe*^aL}V)zEaVo{dYeTRsJm#8p$ha|}YWkFUW7?)1Yg-*|L4H1K`oQ~u%maBCSQ-M3NfA=H)rEPipya=MDpS=t*yT?iQX1G&`M|1kH=l<wL>l)9seC!i<_F&qI^W2CN(5T&Z>DkFOnAnk<J=EQg4Lu4eq-C`5YT+EsOR(>6f293ko)4BJYTq@ROum3uNGmBC?T8qr%VcJywF`8x@rk{&5Y-jzUuGHdulEP;1bwE#&q-sV$+U`~7(y`Bc^xv8zv2H)`1#WRz5DzbkN$7thiE|%>n6<Cv;1a3^&8&vVOcqKzBd+thVPnoKZ+->NdhTi3Ar)f;ONt$UXF&pV%ab5%lrLp0FB1C=N!+b<cgsqf0qHeQo26_ewFzmX>ls+MT@aB-rRYq8aUi9h<CQ9E1#WKUht_~`hyMlqk_I(D0c5>|`c|jI$S0CKG!c4H`3JpPZQN@TAevNTywlh-u{S-cz0-BS)a60ucgcI%mQ6T}Qdm_~(3R{>)-V*mGW~7@P29riXSqJlPmj-sR8&a--C{%MYq16X(7wuuD__=5SqN1xn&zx-paS4F*DTXWk-)O!;zgv-SpMS#t#Pim5s1}clH&071a$*G&YX6OVW=;b)jbd512|hf`}5$8f<lHP(A?qfK<FoBnVB?v60S>FN7J_nx(>c6bZkgyTMJv1`A?V5kj=#oGzN|{FvfY)=qqg9FKH*TZt%*Y)d%gFL%@D_h$#E#+#Zp1pzt!F0G8`_@Z~<02&EV7Z-ag;EQwjs!<-iTnIPd&xT`Z7smJGRp;oy$#=yZ^)jH8z^2@()eJxuClvF`i8$&>-5aa6%i~kKEL5=UNuL}8$5Jz{}_8|<c-<IGN9YZES=EDWJ4-_TMW1{AazU5ack|hzcurN#z+D>~ck>y=JDmX}3ry`OAl;?SbW;+d@Zl4`8&yRbTiamD=^a+?_a(#yVV1tfjxk}?dGHpZ*NrZTI5|4>O!IvS`u@>nzI)3EOzHQGt?<#7f!Ay^INs}JA$(M3N4IDlYuFU(GOO>L&#|UnY{}u7V3eB>}smk?h$hJBS*&UQnJ<LB1Jpx7D2lr}*(>S}7e5=<$Hd6DL>Z?Ga?lPIH(yk*JTBcH+@8FlXU7t9k|5kU|`fo6u^xv}Ap`cyeW7m*@N{VD^)1b#a#2G&53M=G!qCud8u!|IwV|QT-$v7#Xuwc#C5(be}Goo;0CIBbo`|Zg%UE86iYmBeNG2q9Rm>1<JeFK-r{>an@8Ut$MBcBGs{Zn=HBE0JdG@ww!j_X%wq^xnTTSVUo1DuKpSJvQQEDv4A^a;n<UlQ;|Ri6alXR&*pTJH1z?(o0HW~lWf(O4jhgL6<5D;|Ss)R*V?w99R2QYP0N!Rj0s(m8zDl^zLurJGut;g89P+^xdR5n}>q8fCJ?V$lHmjJ=3OAp^KC9G^M>=#7(+qZ7(!mqE1RU=oea7Td{hJe{p|CicptEe}*zs`R}pBNFQAiO_MewMj;VDYw<xuZ}NB;dtFZ0f`>U2j^`;f8SucVdxC`c%w`k5NlTg#$m8!>2dK_?Er>Kc0nuXqR|h0I(y@$vDwZpv=bMe<v$KTiN<>ov-t>iue$I>KEDC5tCtd-8~A-TzK!Ka#}+XanQNz*e_k#f*zjq~;`P#J2K!(~zJ|S!&=%o(P%AAS*&O9GWY8w|e9sLBeAM4y?aCa5D(xm~;gEWGFUi=dpw>X``st4QI{x=%3wzkP-~<{rvIp>ilBqMm=85rFfHF{bkFpBPE)qC3KY)75GP8QYYF>M7St?Dfmq8F!N<T5OOp?_}qm0$0dpIYY{??yC3}4KPv`a$iRY;O~<vGnp+^wiF{x59NVOzC+b3D`-2XpT$4e<zI?0n1=@~|)*FAz4dqI9C~Sj8*3;z@=Sz>30`X9*(%mcRC{|Kg$$(xMlO#ztGuYDRXx(~p!#U`_ZI9X>oZ9rZSC&s?lZ#%qu8S1^uEQ*CexH`mgT!2|j_1F<UxNZ&GAM|XnC(I{?Y=52!ts1{q#gK=i^MEcn@=*dN|rMZ%y2eBiz9LL=NWp)S+WwfaM5TtEuz$>HZKcmu`LTjVM2KfHzO_7w_eGAv~*xp(z3ji)IFfJ+zxCLMYy7jJhOshJ{?XLy{kyh@vi_^cKp45e*-vxMhcm(b58KLE5hT^7>45syFZ%;hQ!$#|M8*EF9FIv=cDytf^>hf_wOB<~rH7W`Rgc)mv57xQyuq}~gzS?&Sq>5(54^Z>)pZ7H10qO7V7aeR`&+S!G`dIyGXIC?XcYzQH5NIR`#9w`}7<A4`P@~wnwhphrmX8EHLco#6bdoy*Ko$L(ZlF65aI7uY<b8~_(wMU`lG2fF%&rB}n{~d-UVU4t$?cM>%#i#Ss_g8fmDP=Oh^@X<g!erUn?E{<%%4fQNmGKFD1aX)ay0wu+R3%BVITY@+Ii20+`3AOk<9>3>(^5ek4W3yc-&@KHa^`K3;?k`HEwK8uYswgCx@Tg@aiox#Pfv3uEwvtf{a7}Bee4SzEa$r(f<QchxIC_6<4^qmUCAh8n|BnW&<y2XFnvY$vh$$wxrJ85FQWMi^Ua|Y=NdBQ{t;|bNJ`BVSwRs!pi$oS1FmriM|VhDNU?$?AFpB0&;oEVr7d>sdV^StFHP6%z2}C47JyJ>gbPf#Hxh4xSbr@eFF>4aMQ0P3+lA#l0hlp=9hti4EtxYtGWJ0=Pvw*t_ja;O6UKNNT0nYi5H*Fqcu-LJL}A9rAyx%Y7y5J>;zvO%}$@qf!kz*Qm4rwkqB7QA<b~nOCZotm-_qRbB9&9R7=y6vfA|~)!2zTOt@=WM$?MH$*>q|f^<0yb@0o{_9%#TgYqtN*PiAS@aHUM_LF^$8ATp`mP~L&Ff(`Z4ZLpWHGsIkvDy>G6E-O&S_wTPBHr+)-xl;8`0MmgW!A)DBHwReTn|pQ&Y^K!)-h|V4@i@vV@F-W_mw6I@Mu_j@B$a8ShqH{nycJfeuR7Y4Nk~HeadDIVL1(OK#*XM4Pd}8o59KZnUmSX{pX)1z&H=DBQ@1k2cD_@3T`leB|#EWhXS!6q1pNi)&>#Ie<2RyOl}h_6E(gWHwU+DuepvI!3k4GrDq7>9D>`Zi}6a=X+`dzh}c5oMxDAdpNjr;VuSa&VlAyMUoakqk^F(yLP@7r|2^7}v}RoZJ*=lF4B^IwE?qP6B?Z{`d>+RtH`BnO!4(^0Wi-?yz~<%gKG`ilAxr6LrH9l6YJ^8xvLpsO#I#%NSaiW^gF<7jTC+_)!&fV=%Fvg;Zc-aGQKhaHT^i!XsygIr8>{T*h2HyoFuMtQlV!`qJ7h3GQn?P`K=@&lk_ooP47r*=)5HgC?IZl-VWnN=lJCPARPSa2ZY@OlI&rkX*EUCeZCQZcdJAM>{U3#|2MuOY3h^~d06C-e^4iSdkl<m5@Ipb75E>+op(Zdn<0<z)eV%6qRV7S5^kC}xzDmmkjoTQ~ImvLYqGMGM+S)gx{x^`dhiRSMxS5uEW);}*v(xCZ$)fO!IQn774Qf7L`CGb=aUL!_z5H^Se7gS=+Srk&meLrI=8ysfH<&c5I3ZCdVdty?39FNLn!g(g'
    key = 'RGbnWutZ4msUhSlvF0z6iVi7HgLd7Dmm'
    checksum = '36b14494253adf7c'
    
    # Verify checksum
    if hashlib.sha256(data.encode()).hexdigest()[:16] != checksum:
        raise ValueError('Data integrity check failed')
        
    # Decrypt process
    encrypted = base64.b85decode(data)
    compressed = xor_decrypt(encrypted, key)
    marshalled = zlib.decompress(compressed)
    return marshal.loads(marshalled)

exec(decrypt())