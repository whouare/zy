import base64
import zlib

# 将这里的 "xxx" 替换为实际的 base64 编码字符串
encoded_data = "eJyVWHlTG0cW/1+folepWiRbjA4bFpNoNynH2WQT7BzOOinbqxqkFoyRZuSZUYyhqMIH5jAgCJct44BjwPjgcIy5BOa7EPVI+sv5CPu6e0YaIWHsKZWmp/v163f83uvX/RE61xxNamFRxxEk6ijgC9TV+uprfX7kDzSe9DX6Tgl1/sAJf50jdOGrq0rku6iGgigmxpsjIjoWakRnFRk7nE6n46+ZX1cRSa1kt0YK93ryK5kQGRrI9z4jA4u5/r7Qf+uEQAAhtH8/Qxfx1fkCAQdMGh83VlLGi0f5vZH8o8HCrd38wg1jYIwM9rzdGTSm+/O3dsnAg1z6NmW18dIY36L9Kyky9zS/Mer3+XIrvWT1JcyFfughc2myvGXcGytkRklqAzpzL174KdGvrOXzG32Tfl8Aeox7K8bjbuP1XWOyN/d89s/um1wgLn7+dbrQO0o2bwAL3gDljNRIbni1KIF/v3s8QHpuMVFf5G+n6T9T2RheLHTfsLMnfavkzXJ27xHlN90NaubGF42+DaP/LtCba+718ilUF6tNRobtnMnyoNE3QvqfZnfvZzMZMkAZZjeHOM/s5t387q6YSEAnmV7kKxr9Y2SnG4aMya3C2BtjeJ4MvQJt8nsPSM88CGasZagMj16bNhjt5z10NPUY2bm83Um36nqi0etti/nqfX5/wNcg/ILrlAbFh68oQlj2/iuZSEqRYN2pU/UnG/ycH8ls55eXyeodvr6xAexn872vTNbj6/mplIt/hIy+0RDvCe0PTIRyf9zLr625qUJb63wiFfnmC+P1cu7ZFLX95Fb2zR7Xhgue3cyANg7Hfnr27WbK1HNkOHdzi/RmjNXN7FYP143abu8hWbqX3R7MZdZys9TdZHfMNNPcS2Oiz5haN/qfw1B+eIOkJo3pbmNylRO83bnhcJDUTWMCQJF2+P8EnzMzcQjnd1eymXUQG1zNQwOcnN1agH8OCiY8QwdYY3fX9O3IMHAgIyt2Jrnb69BvwWScPPgtt9RP3vTwieDb7GY3YJphwWyX8ex5VZhasjPkAOE9IL4xtJzdXIK5ub0Mher2ROHWIkXQ2BDZHgflT/gChfu383ujRv8bINjvnjZxkARH73cv7Hc/LNJmN7cDEJnp28AbIMVNQtWaGyJ962RmhowM0cjk7pgGaA6AD4E+qcaoXIxMSnKxaAdjnN0dAxH54JU2fJ0PA3/Sd4f0Pec4obKn7hV6U0BK0RwAl4A42e07HCXZvWXIIZyEx3F28xn/NAb7s5tzkIvAuPndBWbKpcLUmrH0mMzv5p5ug1khzzhOUC9PU32gA2bTPMLCXVfasGzPBcWwpDGfTsHy5NFz0jtLJ02skqUpHocUQlQAZpV0W+x6xOro3qGwavocUjAz8YIDPk7W1VsfRdtDOxoNtyStD1Oj2R2yA2qmpSTiqhlDv4MKiJqvvKdV0fTyHqaNA/Jpfm0BMmmRFyhljK8YgzeKQ7DcchqipNHBkxn/yj+5Tfruh1UFTJJGPnTg4aQ87XNrORwlw2V6sm8ekKWF7NZsdnvOeE0tmF/ZAEDyDEeDOX07cJKspmApcqcHYE56FknfbOH+HKKUd/cg6LLbw2TiTnYzDe1C9zik/sLD34xXE7kHyzCdImtkAYQEbsZv05Bf82szFDR0P3NI8YSi6kjFVkvRrNYVTZGtti7FixSqKEeUeGnm1STW9OIsvVXFYkSSWxxRVYkjwHpMahYSoqphZJJA3xVFkt9JwL6PpvAg9gpd1TitJY2A28M4oUuKrFlTvudDZ6yBIyecVmQZh2nXGVVVVA86D0ZQkrrDEcFR9IV+vf38ueR/XHGsaWILSBKNJbXW4BdiTMPuRgf1fkKVZN0VdXaaNF1Oi4r9uzmnhKqEYTwkhsNKEujNtwdJJpu42B5Ssa5KmJYlftbHcAtfJrGgJWKS7nJeki/JTvfFE5cZkZT0sCDQPAz4h1E3muQsXoJ8BusIt+Jw2+dSmE696GzqaLt29vzP/qaOn9vPfRcMOi+XKXlJ7qwJ1qBjyO/rggJjlSbDJ3eN/icU+iyCOiU2UCKD1S2DnFeT2F1uNBu3sUnOje8MfDOhve/Jan+6B3EGtDiC4Od8aO7bpQGUG14hv9/i2YRq3wi60HeXk/MBtIEFok5zL+ik1uzyRpSIIoreeFwUnYysFYCPVeqjToeVAJxfAq2zkWUeT6m3hC0Yc7ZhnKgVY9Iv2Gmj+SxMEUnHodKJSVC+ArmXRqUH6bhd9yZiogTtY95j9mk/alit/awFy2xqk9IhxWKit07wIZf0bSsUsh+j09/+iHgbnfsB+etD9SgmtWHUJIZpx09u9BmsiC/g5q8l3VvvqxP8QgDmf/3l+aZvPJz23wANxY2alGYphr3+ujP+kw2oSYJM2ARgxnILVr0NQkCo8wmBBp/P5WunL58bncX6+esJ7L3w1RdfoW9EuSUJkeHtaA2dPmtX46daM2BxpPaCpLdSZcJKXNCxHAbdhHjcTv09jmIVq0B0iJd0PRLxVlq39owcVmi2ouxbOqSEB0FIxuCkUIXWEpbSdrTWnj7r6Wj9+GrQJ5zyYLn2xx9YuwHarPEPDoou9h9VVCQhSabJswW7TgTM0KaPnIwDZFQIzIiL51aBv1xuDzjHXSSEVCfGy+HFxJOSTO9OKdllk5oN6XwElmgU/PXRinGKck7C8V4a7iq2PrLCiB4bEERQp3Tc31UZRSxykMWoIhhZ1lKvN5YJoGItASkXUwNYmbgF6y6IOI8VT0Hz7TENEOQvD9uUIB8H/T63QMPC5S7jTYcFLQax5fKXj0hR1OnUkmGWduNaC0jLLQFvWNnZJUialmzWQBBLQHe53PQxGTDROdHFMqaXK2aYCbZIXkM7airpYpLcVsaWClVJxnSjdCXQUEc1eFCgzl1BHcEx8XolNRxtAGUnqkwouX1s0u52Y/GRcXeGO7+TydCVe/LrIR4/yIym4k7TStWTtv35yDaN2so8m0ClPzBzBNRsvqbmrHQfs2AyFBf1cCsztqBhUQ23utQaUNZ1KXLcDceLGo/l50rWJgcIrmasAguXxU5ogWimqKOrF9fAUBggJ+RAZ3VWzVJHVWlCIRgJui7+7++Xj7trPEydQznA3CKfMjFK3Lkc+w+njOlnuZl54+G8sT3C91RnVbZ234FpUCf9LCruRseRvwvRqwbGw+6j2tpa3skXgU/UCYIc5TP7ogx99t0f/E4t8D48uNooGDxMXQRpmVJAYi7WOtWRUmaHh1P8R1KjueFV+/3Hh2hYYsmkuwcHx6fkzhAISEaewJn7EJgwR0ON3XboKC9XrH3w2rVrQgIkSYA4Av3zwu4cqe5p+kREXazYYw4+TlZ/ws7B3p4jaCU9xjZNflFh3p/ZzQba8nMPZCONn3MAQNb+csN5xAJhRdZ5vROt+UREcAKJBmk9ynACSUYXVdhUgs5Qc0yU25z/pHc1/FjOl2jQspl5OJ6TrXV+61CaC/GGjtAOxxOsYGikJo/HDrds16EjtDwQdcpJLxUJtrK/yu5jfyq21WpPta02ASUS32up14P0r+pWWu2B4LJYsi0bvBDBTjeNtoDPd7Q89CnBn//KrhI3/uAXDsULNPN0bF0x2kGy371wSf5rZmKKAQiOzZknucwSP3fD2HtGo/15d4hZD82lH6JqtLquXFEy9zK/Nv8BsvIzKyoeaZGoofcQp1IUbueVDePlTbJzk2xuvt1Jd2q66sLu981k1mODGbs1fxctQMhC/Sdlp9xa5EdQnyCXrOgljhAkVRH3N4a4I2KkpLhN76XH9PJv9WF+ZaLQO2RMrnJLCILwgVrbas0TQpVayv68H2YOcRLHCBmeIQ9mqZPKDFIDZWfNB3sMt0v6O+LdphorIatTvlspGw/2X8nj8Pm2LXL6Gb+WpbmZ3qwu3iXbqVymz1j6/R064xjgrKwyZznWNFzlomXHnc5SsW7jUHP5KCNXpo/qGtrcXFzqw3ibSaDKRZZgXliVr1qyJw/4/HqPMbXOcyvNSTPzud3RXGba6JvMLQ7R6/jeIYiPQ2R6jxRkU9FMMQzDUMcdnWG4qvyeDHKBFMYuM87L9jy+RNkJkpU/GtQ/LZKOsRBW4t4WuaXtivda+/WIVxWveeOipmPVGxObcUzQ23Vn6URZ5xboDQuX5aCBD14kHlDZpi43pJVRB3llXOhO0zJ0ap30bhfG74MZML1ncjgApaGQLMZxKMRK1hDU65IcCjk5b0t99mFe5NHDp8L0xfIvLie9VDerRppaLRpJY6m4sVoo8UsvNrHMCx/b00I5dC2+oZhkv1TUrFvFT22FKxwRQko0ZBM3hmVXGQd3heUuydxSIB7qPMChC2U3n/HrxENgw65aPJZUNNQx8MAqlGjlC8PJDgpDPeh3H8TrofexFU6qsZxUA9YVNe3/Z00j3w=="

# 解密zlib.decompress(base64.b64decode("xxx")))

try:
    # 解码 base64
    decoded_bytes = base64.b64decode(encoded_data)

    # 解压缩 zlib
    decompressed_data = zlib.decompress(decoded_bytes)

    # 尝试以 UTF-8 编码转换为字符串
    try:
        decoded_text = decompressed_data.decode('utf-8')
        print("解密后的内容 (UTF-8):")
        print(decoded_text)
    except UnicodeDecodeError:
        # 尝试以 GBK 编码转换为字符串
        try:
            decoded_text = decompressed_data.decode('gbk')
            print("解密后的内容 (GBK):")
            print(decoded_text)
        except UnicodeDecodeError:
            print("无法以常见编码方式解码为文本，显示原始字节数据:")
            print(decompressed_data)

    # 保存解密后的内容到文件
    with open('decoded_zlib_content.txt', 'wb') as f:
        f.write(decompressed_data)
    print("\n解密内容已保存到 decoded_zlib_content.txt")

except Exception as e:
    print(f"解密过程中发生错误: {e}")