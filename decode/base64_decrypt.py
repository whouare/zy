import base64

def decrypt(encoded_code):
    return base64.b64decode(encoded_code).decode('utf-8')

# 替换为实际的Base64编码字符串
encoded_code =    ''

decrypted_code = decrypt(encoded_code)

print("解密后的代码:")
print(decrypted_code)

# 如果需要执行解密后的代码（谨慎操作）
# exec(decrypted_code)