# 大大鸣  九大仙草秒到1.2r版   https://github.com/985Ming/qlk  https://c37375600.dxb.baijiayun.com/s/RSk0WCOzxO
# 有问题请及时联系大大鸣 v:xolag29638099  （有其他想要的脚本也可以联系，尽量试着写一写）
# 环境变量 dadaming_xcck  抓取 B-Token 的值
# 多账号 使用#   例如：账号1B-Token#账号2B-Token
#入口 在大大鸣交流群
# 
#   --------------------------------祈求区--------------------------------
#                     _ooOoo_
#                    o8888888o
#                    88" . "88
#                    (| -_- |)
#                     O\ = /O
#                 ____/`---'\____
#               .   ' \\| |// `.
#                / \\||| : |||// \
#              / _||||| -:- |||||- \
#                | | \\\ - /// | |
#              | \_| ''\---/'' | |
#               \ .-\__ `-` ___/-. /
#            ___`. .' /--.--\ `. . __
#         ."" '< `.___\_<|>_/___.' >'"".
#        | | : `- \`.;`\ _ /`;.`/ - ` : | |
#          \ \ `-. \_ __\ /__ _/ .-` / /
#  ======`-.____`-.___\_____/___.-`____.-'======
#                     `=---='
#
#  .............................................
#           佛祖保佑             永无BUG
#           佛祖镇楼             BUG辟邪
#   --------------------------------代码区--------------------------------
import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='15KFhoHFRPCtrYC5', magic=3995):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='M5=q7UiQ{0g9_A)>M^@Rzn(I;j<x_qDn)3KH6i76x>O2lz4{3=snaBwRTyvb@nL!?l%89%y4XGu)OF!}S=~$kDoT}6&4R0{5E#u#XaNAJ<qi4ieFE8h4i_GP8_8uJ;iJKB01onqSGkBowkJD?t=QyJ>v~o0#WLMTwU5J|l&PQ;%LL7y{K!3ZyQSSgs;P^BX^338i(XnXN;YCkfz{is=~var{-J$Na!yoT0o_{51d5tM%<<Grz4uj90nd`A?6ld&>F=GIiBEYGd=X&MTq#789FzB|5zE$!X0QSu{I{t@eXD)U**Jw?hX7jy?9*|s%5R#_#fxRY_~CxtoGF)!2ak}?zGK5&<_9vMYUH$j>oMHcc#)ytGTKsMEc}%I%*DLtJ0IT!v-AGiT**;>3U1-Yx)0&r0{-yd;ONn!)EnK%pO@jRI)dTSlxjQo`k_%zv!{!g^2uHpY~qmy{L|axjL5#hehXdT&c1>8Pm^27u=lQL`rvBV$8ycfn#edG`!@bx`Ow(J4C>a}%<xqEh}3+X$_dpRnyAOA)-9eti)UV<-8z~gXQ|q=g6Nd0{gh?X?)-A(2%)^!4C#%p$-7-Z!3C)BvZC3J$?%8I`vYa!rb$2Fp6b1(jFQ}k#7}MD_4$TC>N&@zOdi{MmIu{f{u>+B)^e>}gx~kJQ$J(w@6B2*<Yf>N`c@!s((laz`w|%0>#_t+3JwzC$bFsF#sQ&X9^=c#L=(wXq!&6s!3CB8>*1}<2*aGq8;|8E;t6%$;M&{&r~%#owa?&~0<mJzEb3v#%(L2Y#H9h=p#r$ru}WGs6Ejw`s!ll+K?M%>&&plA>f?RCSRaJYkXeF&X<k(O1hX$)Yfsn!S-YYigeu(wOu)~EN)F)=K?AUDEGbXT^Zr~w#hz7Jk9pu$w(8dk*z258zQg4h2#8@@=ByRt2tn1(uzmgD<>4S&Yhl;mMA+Jjk(W(iM%bDUtln#h%wpNWdC#qL`)0G#f@00TE*dAL=wP*t&P4+RW1*>t);m$bqzA0MJJ3~{3!Q?BbRn$Tjy}2r%~(<)|3QD1WLfy6mXoZ%oB90HMwBa+BDa^yRxgnK`Io(>gt6l6;lyk$=p9TBbGXu^b7nJ;So`$)n8S)~75|xh`4L8hChnX!A(Kg1AOG^aKwMamxP1~lWMDI<6sQKfozgwlcRMh)2n}(z=)*lJi?V+UxsZp$rLH_uaQPD+*8o8B@^PyLqWyFO5g(sviF^C>f`7tO@UxD&RCR^FVWupE4hdw1;@+tAc6P(4NTELp$WfRfj5ig?GY=vte4!-)H{R(({bm{oj#|i_Oj>hs-fqa<dmcpLAUV=U*=U<PU@yWr;4~y%5H<GHUXHoz%T=p{SopGyYWvxZ3gXIz#UT82O6$_Hj>bDBP%H{z*IWUt2c=MLUn@|1ai%=Q!bWQxD|>n#uE6Tj+OByfzik1%EIDB+SpLLHvGmR<Mb_LLi`?%%RPW9g6gfMGy$lVZ=bTAl@nwmhw@>#Mh7LAn1fL8&cEwItnBk|Y>=Lb8WlMGsKteNyP|XyKTfO*q%_Xx*rDa<pFs!^NnpLR?q0xfsVJtV{@mtl$+m~~MOUiQsy+v6Ewxb@@zpMn7omz|cb0RGYi1$sj{`$t2)6&04!<4gHf&d$JbkCy!nQv{Q=Hnnh;!J#UZ8n{q(V|W}cv^z^Z(Sv&z-nEo3jNUdL2nGm<7<wf))-Wcb2QLf7x_9keh*IZu|^J5_@8b*)7+&^&RS)%`jj{S2q1vu$(11Q+frd@+UT!QXLPb8jo+*~f&_?dfBfST-}#=HE&4Q|5xWK{7<brU&oRFO+%2Xzz4D5jRRrNP-7iUavwOQ3GTIpb4;q)du@r%XP+<qrzHd>M61XSou{+DQlwi2p>O>0et}y+zcJ5aOO_y7ASTPM_LYzd4+3b+kt)66=!eLD+1wCD|Fos46&`iyDcx`A9)7I#vx_Rz)|3+yjg`R@9h9!X4@r3VDF7J_YNur|gnArhp?tRmlG$S(iX{&MQ(4_;@H*RzIGFm@GN6WAS0EW#RL`(mCTO}>Wv-XU&s^0`c(y~K(@uN9J9!B|yzm`FXv01Vq9=|ulx0+?i8(j#Sudayt(*xdTZkf?3_ConflQA}#X5sX2a=YL@(da;HmiVe5)N6WxV1m{?e!by2(MgfNK{U7CBPM4jR}r#l5rd6SVJ(c}DwCTTr0t}SK$=0Tx<L%;3%O2)x{rZ6Qftik$1A#Wy(}$Mh%3@DvnXWPGYn=T!E2#{0g|{}IXFYIU7<718twl2WjLR%&z)4ycwObIRS;H=qo<Ikjj(sDT<V~(xbogCt4#n0V7xybU}@4g<UgLeaRqyk#z|h0w(ebsSl3Pg&yp0>7+<%&-RYVZRP@CMR}QLH7xr1#w_A*67T|o#O6PMH*;|gu$V=4nhc?wa&YZqJO(lQPSnC>54q&1KY1_wgw6t=%#C1Cwd)cW-{lzDO5U3>rO#f_fjJFPgj{1#vo9S=i+t&^h+kyugr<1R>LQhHF>(t3u8Xr}r@J$0bxl233aq+ADWyw6Sb|RfQ0kTMm?Vx3=ie0Hmo@-49&|lD3BFoX^<c#sv;cJ^KH~Zb)=%>xvkc?35WVKo7wSs%4p{!H2yADKZd^`f_q;<HPw!{zlQBUpl1|bF{66<$4n8DM(M&y1-#IzgbHY*#H*i{pa1-3ccLxXnm2m4mwQ)wmgThT*#U`wOT9s|R@Eg<0A76#%AdiS&Ild+~_y0LhBg3Y@LLc+yXkJ@G-pckIhvcf}A=YxcX3uZL@ZcpoMLi;2D8L-S^f-=GArRbbwmM`+@!0-y3YbtcW_dkkfTf{8C$ufU_J|!#T1>F%40?3xgF73VriEnQ-(EV0>VuqlG@+J&WUtvuHE`*<MaqAbN1e`Y3!cg8tN{AakoWNd>p72V1paKC>nbh=#ECbFoS3O8$yeY&u?rnE-Xy7kGSRlC(K)*GQ^Mtkvvy$2S1vbY+wegg@2zhkOOgDIJY){5aMy<TDgHM>Gy(*(S<1F&Zqsfahqb6I(%FQ3TZHULtz8HnDa}HI$J_t%Wke^A%^+apZKC5}8c)^H%kHI<@z@U!SEi61iqb*tVS)j{MXib#=F8ojO-q5qPfzWd^;+Ea;<iB2pz%EHAqRBf5BP@SQkEc_$9Cs6V*)t@XCcu~$X&XwhP@Jed^dVj$;**G9E8gqBNniLy!JtL+1MQ(o`XkZT9!|hy0g{~5WMrAf9fzISAU=Iqy-~nm-8F%+uky%GzeSUAWj_b}&2%Zq@P_>ea@0s)px+UEl~8f<Z#TQI`C&0wk>ZZwWv7V^i|<Bx^!Jgqq(TobRu`1@HvyQd*D=A=DJ<(NWgxEbT+xe`chy4=z-O5s*Nae;t_1o53ChIEGBImictv!mILFN=^r0APxRR;GoFE-k9Cx7AG-NTlcr0)|LHad)Vi@j5LK_QT$@{;<3>}{MP-(_(fh1!4pjFEdA9oXjnOC)P#qmdk&H^lg?r+l)T(ud(r>+9?+AAxGerFh)?hLjYL`A$EL<U$2sr0Sy{bt4`)QT~*5iwc20wPt*tDgKJsJ;>emgc-ofuuKT-LFQkhP-Z%=DJQbF?2Y62LV{$Kd`O#*k$j#$O(Ltby}N!Rsc}rS{sV0qV09gVEYF^XgmUw2uHJTk&sUgRs+3aHyvc}&R=@Pjh^?pxL(x{s6JW2U{-%}pUW^$Q~)h;k#B&l)cbdC<7Ki$)FRSTh^G}Fr3)`OFgnn2wej4-xdqq=NF!}T2fLTtNqrs92^dNjxppA6g}l5lY{0ocz9(>Syq8)XIOf6OSdOkvEOxaFqm3-O|FLLRn2d9EBu36K^|wd;o1+axJ}F3L-OMU=L~t)g8maeH*r|BE>xry_`q3<rs7PE&L69c#1mi^KBGpACzKh|=1vHT?%b`I_sM{3!0J804<)a^Qii&exv-Qoh^Gz-Po_qft1gJaYDUr{)=iXCI`D}d};EjFqre;?mEWOZWW}&3Su9DMKR2}7osQT)#3?Q9s4quwY?t;ZKztewe5~p1qLX5O1NDiqzcv5t?uEM{DUPkQm5UCbi*Bs+AG4=R}REE5WmYfp|L<ZEz2smo=1a5!oF|Lz1lj^xQEDR(#HUvdVv4^TP=?=#MeO=Xf85wCxdu)NW@(%k8%Ooq?YJ$ZIC5B1ipNfh1Iz=j3RiVioM6a}AG_%u1IJk)4nSer&3It|0K+gAAtK*r$hvq)etxG{)z#p2Sc2a&2F-X&3=wpVl)xd1wpDvQKh;RdimI)sX_8nD(qLUb0Sy?y7K#NQJzbw<<opu>YV@Vdp$XgP7;UP?B!koyCz-8<JwUv6Na0XDjPGV;es4<_qtAb{dq(M)!6)g?KIi6!2b{VNTM(PdIP#7drs;VAGm12zl<%qVAklLun#u&*INy`E^-wM(+{$bGFMNK8W!HaPlV}`Ozq<>KVTsA?AS>fYKI+y9@4S|r!XVmiw62KH+_l?GXQp6k(!KfH)pk*J~mj_}uXZ6Iv`*c<mJGKxgRV1PxZmI-P<bLcmUiWc(F!HaYmhp2>)w$4QsM6n>7ejf{23s^o``GIFU1oNAG!cm>kpS1SR=&QMlJtdOMEMgd4pIJ!=20?(1^3PG@E3OxbaQ6#ky=YVciQ)4U+g+Si{;ft?oc>tdvtDd$MP*qvQa)qJB6=Gl}@xjQQrqf%zKk|j=XZfZ^%p>+WQ}zRm2*Dl=r#vQ_Sg1%B07D9UJy?B`DO?uBdPPg@I9=oYfY1j4vBE@jNIPx|K`EJ7wzB2^vkmefKejQ7f+WGI*R%PRH<G*`*P_3@b($jWjBX{;$VjRmFN>A(Rjn2cSG+DcR(WC!BE+1!gd17aX9}FvperhhXJP`oA`=K|m9X1VI`arfx3AK1!K4uXB#{i5_gywudiJym?GhG6EP<a*+pGoCSb$sos_bKJpaKd<ywD?U|_>=8vvAl7)@+Jq7;|4cqDJ7J31+7-1BeIvF*~U<?doU1z-yTqy{WB+`v#Tl)SF32!rmd1UUGy|a08$IMrSVAFPeKn)CT6GNy9Nkxn2Y%!M~mJl(F!NOAz_7qw`JDX7riH7Mq5Qep1R8#}HBF3`2KMYWov;rf=?dHT=4rg1)JC0WFAbLQJLHQ+t7P?6QK*z;JXSrv>SuUIJcT0;DCmAr>8=K73bLhn}B`Ayw-Z%GYe`sv!e7Z_OjCesdwfs25rnt;4gPHV-xie%+MC3)lS$a=<-@`l0Av1IzYw1JI;DEV6@6Q|xg(@KjYCh}`HMP@lh_2~@elXvrepAk_Anp(AF8yWKdWjK0cd8fIXs)RceH}vEamPfKI^+Gi%b10gihcT-_V7i-pAs|t_pyoe%@QlWI526m=63*aZ$+JrbeF=)&PL6uslj%yKw4C{&vBHM0oJXz%tVrl-@px6-|2WoEoIc0wDt?=v{#86`C64jeIQk&*7BKqv3*;b0=Gjcu_i+ZUBG%4bBupA)l>A<0by8to@ZUBWR`}sc5S^PM-^NGydx%G;>(;wp3sUG{_Dbi`X$R}DHag2N7->H{m68TU;Au9BBsVj=7kyaFO3LD*~7G(Ur9=&I7sD-?@&{;MLB<UX5hzu<04X}9P@zZMtFh8_dt<nfOx9{_-6LTbYh_Xpz=`{SNzIEuTchoC)4~sbau#Z+=}FpM1^s4ra4I|e^c&6t}e!&68EKy%c?p&q?+tNAAV!2;f&mi)*M_s6q;?#xYrpyhZfF$T0B3E7gVTp2-mLyIV`(0Br&uEW2%M8z{+}iG8frD=eC;7a^J2{EY<ZB-v;fduM{~5w72ZiEbxR$yX~RT<#(F8T5QOLz_-*sQu16Ht(6agS^&}Uzn*F*TgFhKqvb7-`$S{SIfrZ6cUGbAiyJ&t!(QI%UGNH~1$j*`i(6L+nswCYNV!cjNotufe2b*$4<2bA^57f|aB>iJ#Sfi2#G9e_%j)r8m>(c$?0a3h))?O<Sniu$^ZypD>-SVR@$sLx_+YHL#;mEYq}u*AyBp}iQwjNSTYKs@DDM~e7|+o=^8J5%#CHSvu#MYJKmbldH}#uoAALBJ@#so=1GxBFog{#qkkDX4i`8CAXGgS80Cq&{7mA#{_&Dj1$zL1>QE!F=>7>u2r>y_QKynXd1`s`LK_RvbtNs3MLk+%<Ob#aicp60C_#A&PoH1FG(fd+KM!+>syzwt3y|^=JeM+RG(S!ePbPbo&B#o-_*GT2wvgT9m8p;tuqD{@OF_BnKS9HUf3G{ow8&GbaH?Zse3QpQM&_b(y3qWsZdeG2%b;qMk!J}`?fQ^Z@%g#zi10745B+Om{Or1^i8y1s=IsH6G-{p~Wd=cIjmuOC(iUPxUIo&kF<<CFM_)D9by~WOW*=qf$ZfQVicTfmhHB8VFwIQZx20e)0A7U|p-xL7Lal5%pK^@`BWlog2CzCZ3sMT3x5?(a<B?H0?8$ylNp1td1?UGnt$VzR;I0+}hnQ#F!Z(78s-dvrWZwG8#H<uA~i1@C8lvqh|e2kFBT5#{USU26=qqEt>jFlTK&uKF({#a4yHtzLak7=x#9W)3_?=+fgci$JvW-^elNeiE33r>-3iyos=bB5wIn|IfWNLqJbH`v++S{Ol(2cKOLK*F(e%G3<SzOCm$koZEmuJ>7p<0n1-^ULz5a*G?3xiE0$SksDmqa+4{+=DIlpni{o9KZS}1MYo^Wzd~1Nq1pP^2;sN;%adg{~~&)hC{?9pif;A0Mn&A1)G1&K70RgD`#`18Ee{nHF`jn``+cdA!UqjaUB`ap3pG<Q^E2d*8p%A{y)>vIs|nyz?VHgpG(y;#;0N8K5lgLtlp?-WB=@Zin3j%;ntVzi-ZXRyK9;htw{P6Ddc7v?FV6<2-g5qQ%N#K81aL1{Vaw8M}1VUnEl3I9M*Gfh7O3+iQO-qjWrR1N5H(GOz6P>uE{8Lb~P}1j_1nMMqRJqtFO|Ty2&{p7<!I~(Xv`SAB7SxMhsfhc{gKjLDQKfna~!)A)k4=%{7)SiBB3`HLsw0(fj%3(i6>~BisotF=M<M2xh>V<RX9dh_O+@Iy7mnSTGc3G+~qSgJuyqqaG;zoifZ4z3Qd8j2x&9ez(Nu+-rCSgs0gR#U151!WV~IUIe!!K-HxDkde`|vN@+!TK}4mu~8EKMnDNdDr{D3q48GCV|SpewpfX*I4a7DG7&YmZ0N3%!ne)cuR~3%QTAdFmfy%@33kcYPDg7|A4>424$JyN9fL}{8{FlinG;sgUTQZ5y#N3w(k^Uhq%IQ#xRU&_8258(%&x9e|F@BR_&(1#xTIT7=&m@zpQWEIf#s5yAR+7&90@V~84cVGDEyooH_`QcH_;VV;)7QS3cRz&z$GoFKvYDOB*%6?T}L1q1KjDQs4v+EqsY9@2C*w((}80l>-TW3HAm2w&y<-3&&QX}m&IW<!#!jm3zX1?2!pCLfSjA9*`Aagl4PJX{$OP`#3>ra`;2P;?n6M;JeF~x56g*Z-iP4Tdm{L*_*mXF=28f`25p)LxnEjG;w&7fT(NF%J^i9381QFIx*Z&CN~?4UM=L<f^RqBDZ`ah2ElEMM7v4+N);xlIB$Pu8b2jth>So&X;91J7NgNhBgio$_jRWfprV*{yVW<Pu^up{-QCA#bLaE$ZVjFU11VB!zLe}}7Gq=(3lq@ArTd(>6E5_WaHn+&wnF9x;M@mL0&?h3063)CoE`Fai45%@WUxlx&&T@E{Gv4QPhg8=t5*w&d;wX-;xRh0}r#r*0=T@`UBYjZPphlwTZ<UfsIfk%L<Y)3`vLi+=(u-1xVh&_IEac-h+fUKP(M`Rw34z<3VAWd0uTjQaoqH&s^OrACXRz=$0a2h#QoN}BKOH9WdC=Z()Xu=C_4#XIqo4eIOzqbTOB6c8bl4`bu62K!H-KNtW5Xi8VGsKVyMCz_cigwdcMsw+W#0$Es11XN*iD)>cEZp?#t1Ar@8S1JHoBYD@{Ea4qCCoNjDSl}RYU<Wa1NV}Ho!AdeT{RL5PdH$Ib~ak)`{znH+i=KBMjWF(jj*mW9rRDIf;~5&&GR&FxL`stfNH6{`Eb!NlwnA$U`T43}DacdMdFtT2vo|kp}t3|H&6*(8Cg&6J<)HZE)z=o8Pg4Q`<(-y*8bsfox<f@`T<~M4oqO+;bT?Fnz{%^YI?60@I+$nz+;HZ(5i>;jc9vp99@#5zE-STX>(ehns@JdUm|cer+0}L%Cd`F~_sp9Cw`woSzi#17>kQMFT9$)&!&c8u?7qRd7iJ#&}6<hznCzdPe3BS6h-X`(n(ZM&#V(JzegQIczcm)JGT~*!bGgAeZL|6UXs}^Zd6|KMXG3<_$8JdJ$}Q6H{Mey7t1@*ixRy0AnySRwbE2SS`67Z&{1U9ZbV(pP(Q1=HJ;qu9iqa+Q;^Ri(0*SG40O1mVJuPXFUs8?@>pzS2}aNPZ_z4V49pf!+#XJu_TS7&x>@kSxIeG5f*K&+5_DmiNUKl07?p#>eAv4!*g5c=EF)a3sMr+tUFk#VXWAa3HLbDH@L@$VVw-3-Kp3HPmwOZU~qAmdSx|srA0~_?VAW$XKdGIa!M44rs%2D4P?cCT2g_X(1E?Y^^WlqJ5iLxKw9!|s7wfFk8HEdsn}iLz(k*0a4o945Bn24GS(t}OvcICM!%<?)^x~~QzxosznGttXo|e%RjPB<^{qjG;h|3!W_d-3Sv>dB!Fi6_V(wd9<8D#z=>t&TlYLWE=B3`Xp;c@gw{BPZ@6NbfO-LEMH8*yB$LqSC+GJ|vtJOo#oep8?n)#mRJr4_+qB>J|xD)Nk4+4+yy$=;&4KWa?5RqbDI8B0Es$WPs|F+AfD_RJxH7Oz&s`Hx~mj@2;-Q2D9tO10ps&>1ZG~5$Y0tU;pEmM{7B@~K1l$Xk!6)9A)a`ZL|OqY7D1TB445s}S)Zg9@8+CK9l2qiHu8=iwI$u9J44j@rC8t+J>D7RRpGZrD6_hQ(-owa_{h0VvAmrjl2<GKAb*EEFDBgwUu<RoH&VK~9VDa5Kv1t45Af>wL0oKVq`m|U>e+P~qjqO|aM-Ga0Y13oK4^Xd5Elk^~%r&rQ-xPJKJh2l3PMF?6z##x?hM;{Xt;m=X|tE;<#Jsj6LSV8s@#csVH4z?K9WCW9;JM9ti>f!hcIb_U3f=}sgl6LZUEX-d&=Q|;5nTk47n<aZkYF3~HItV4NKn<#M=EZ}Jai5V&_pM!AQci#It-DAvW23hwFFFLHUzhBAn_PHZ<zEYoEPJux5Z5emjBWUc)zME=(VGC7%a9LrsU<{MkZ3QO{_6g?tn4g{m$gQBT&Wm^h~FN+)}fn`YWwtXWD7cY>8*W$(u~JU#%F40%bKn!h<i?1rbbA@qWWW)!QZ+I6>VM?1alY8Qn?MXD1!4ce^S1m;Q0y2!J70siAU0r6x2R>Y-!!dPEwj&XP3*KCuY>s5#E*X+-cJO=6tK+(S*9Vwe9&e9Z7k!CW1t{#dtLkfUFQyaFi~tRe@U1930j564JQ*aTJN9l)f=w0??gyJ3O>qHP_P+5m{yicLlXYV%g0XpfvOJg5J5yT})P}{LG_Qt|HBCVCiRFur6U)DtQ)e`wnRzkkHqn?3op0=oYVlTMIQ#bwjW;hdyb!I8%rW6Fp&i5at2aZ_ys8Xa)=!vv~cVzGYP+eF3j4f5&Kz0gA7D9jTg}P(;u#KyyeP`fn=}i{`O)x-qj%oG2@>@UOv|SZQ-uh249I&sI*IOU<6LUSuSnD$92Os$qFQWrgeMFQ9GmF(@cKW3SmwM{v_sY1G6&ms($x2+V+pWI>rl^N4wxZ`v}G07$~FUsftaDLPwH!(Kz3QqTNpqz(@^Je-FNrbh0F%Gut^LnC~VPUWjc!-Ko+9VT9e11mPz-6zP(s`wL!S6qenW8y-oDytJ(<!Z7Q<4D<wySvI9)eg?UZXGBYVA%a#fM{w^p&bn*MRO*Ddlx;rkhnbaVylkx)HuUFdJ)XjX(x1+_tL{;j*3Ij>7a`TR5qKyB*Iy4G@f>YdB`xRttmzKId)?p$LZTvgb(QnCW=n7K_RVd$BOPcH>m0gpRG#6t5+F{bOSE9p1uMC@zzN63wT6@QuW8*Ef#hOB9R|LL0SqA49aUVf5<W1L{U$TVxg&;mkZ-OEXNd1pnlT1GM_>0qm|s9bAl0`RJ4d3S$DC(dTyjnLU}yDT8UL)hOZE42_#<0)aY)Ud_e(e=g||D1LT=x62K<p46J#f37!b@cfZXyj@7VH&>eZE6rh#j{{Z>D89#Vpha~pb1KKQR6d9oc^1(P%zZCYC7wVqc)KP^;u0X~uMWVRkDG&&ThCFFsKOEt0WSxt==fE^>w8Xe9-iAYV71uOnk!?|V+N^dRdKY%?ipYV}4ZHJ63pck~ivqf?EmW0KwrkJ=gX`cI!jSq?0ULOdb-?lv<|>^R7RB$Pv3a#Z<l%PKBDcQBj=lt+W&kN~>~i`S$Z;Kf<CVjy%fjq3qdEC6DLeIGFcl-lzM7)QsZtg(2u&U?w&mS3dbca#Vy-&wdq;XMYS3PZ5c!ut7iSCEs6+dm3On>D%z%?K_30ypeKv2qw78M!XT%W0@R+6KX|lx5Yx`HBq1NA%URB%%i<LT%W9l;99){GFRZ|}yX)=sRq}J4FuxAAFbL%w07%|r_26XL6nTbrB1DM&irTa`ew94ABID7{G&Hb|OSHYt;&-q2Tw+t?JxYd<WwYacnqCOqz<8Ksb)fC$@1f5HpC0~qL0249v?><K@XZYbicji)q(vJT+WX%9zHccoekOh>Fd<m7<whKC*!41smGIDs$GGfouNJ#t=4&0;S$o1i_VMs+XX5Pd&igKMBe;{SJrMs5dlV^)6nGHemMMF41i<(3vp!dX|rlMf`eoS4}QZLRWy(s`n0n;acZu)~w!X(u5=OI~rSeL1EJXw7Xyow+@Dl$9Bp2fn-znhHYCbUu&eoO0MGPa_QKXTnYHNcW;K=|?b+vuS~sdy%$`*;L+<WqL0F2bv$zpu-b792N7ZxNXY9!8mZ8gmbSe9m|3SQkaqbjw#7((h;6|AUbq8sM|(Qg?OI@$)%!)3(VSpARr9fP9abu^Wdxuhkh!YN<3A5^cNy1J{9K`b@9)k-NQQ0HtAi4#-@wdcYAa*B1c$K(VO|?*mz%Viud(L{i}gts?@SAa*|K8$+@ZDa>vIjMt;W?RqqsUJEO6b37MDQD*<=-h*(W;2#J|-&s1VGm5lRf19Ojv3?<ly|~#<d}hrqwpy{v7|wdk+-}Z!^`$-{=Kl&xve3SP{1>WyiM|`N_8idVLZo~|Akn29r?C!)rJ=2pqf#`K{zSghFw82KHv8ksmgkmukVkU9+g6YjGUX}pxWI>xMXA&gmhO;LF?gm4DVJH{8&iKYSt#@Cpeu-tY35QI!TY%48cieR@MO@nJ$wKbQEJM+{b{b`wt79AcgQIggmHu0aTo7Wdde~8iwT<_7jeb;?P0M~rWL$(l+U*jBLo!cBAA3x49*6Pqjr;Z#EhE`QnNrJ#4$h4OZPejyM&SQ9)66bZY;227P@amc|4qjcM~m}T(@>P&XgbPca&{lo*hP>sF!GE*-%^l;<GjWpv{+7F4o3-13Wj_T-nRUAgO*KRn|0SK)^ZEPTkh@Tk}V7$(OY*d0X4F<j{}+>j@o57`7VNC02D&-FtoZo$4HLZ&6DL5!Ff0x1!=a#5ybljU^@}Y|Jcnpw)kFPNXOvQjX80&$?>humpb*&_M0~xqQUETkJ{dq6#G}d43oNMIXJoZHb@u$MHn{&UH^0?~EQdknG9m4Ws{!rS>VPJ)lz0qo)y_Gm+?@Ckp_!5ushNAKi9m=jiJcFq_P03X7v<)DgM_KjnluD9A5b6U7RVp-{!|x=>2ck9<SD!oxmRrXNk~d%imA&>MNUl3xh9DYYTC%wzL!fD%O=Xr91P<&$SP!jS=eZ=nl@#XK+{bJs%nVcg*a^KaSn+Mp&0BV~=Htm+t8$VO6-*%2=DIaPVVRBZG7s;t=g?s(o&t6M8cG0uT$of)BZ;~zgg#MUdA-|(vR?^G*_n_(V|pWF~h`lymC5bZ6Kd27;r96HyM=lnSa1AenB3p2kt?cviU0<aB!le(aGTp+L~+`&pAJCG;CdPQ$okZ#tiap+e4JVVA%iAoQWVZTzPl5uSnMFz7WN9=NO*xvLr2HT2|k`u)9^6@osmv*RwkvTXVIjbNfNqCYClWQ~y{I7v9juK^wNP}L$jM5c{5vot>C6J}^=LOP*Xo-|&?YXHroz^8qRJ(pMYEx*FfB1R=y>Lg{kr@^DHOz&`f?cgx;GWkFKb5jeq`dd4{W1^$v9F7u)NGjN=+;g_CpS=fiUarqKy(o1(5!A2??o=lG1@>=nm+19>^0_=&e%EFS`L->nbN~L6(vku+vUGkI_A4##UP?z201$Q0w4HszYlinX*p8sk)-TSDqXn?D{0FaHB&WH=v+xZHj)r%ZNU(#&E-e73H3bWkUZ*sTRD!kIa6Y?-Bz)_FPhdD?<G+k(I=!gs^_#4#yQNB>x#sU_#1MnYa5RTs#XsmygZ02VL8sIw^<i7rf<W)YbuOoLA-DdkqTfQL;~+2Yhnc+L<<+99^y|#cbzwee?`3%PagjoLLNuK!@(H5Z@dX}SVth_Q8vDrk*M;5G0LjvCrII96vZyD-EatCL(Y4q7U~v}pG2CGrv^2epaz+|XU3!Rc@30%YEx$nbL(GKBZayp8hK8rvJ%<(_L+>=0jGwQ-mt-W%VPJ1enzyCWa)G_r>a=IQkXe84U$S<nDIXa^bE$HF<!AuAhK3Z#u`bW&>)k`c4b%G8(2Q7fcjLTU7-k2nBJ0nNtM$wlohG0(=+A%Hp)`$=5R_Uhvl8s=L8hr58$jAi7I5UFR*y1ZP(C1_v_;J@*hI2{kd~c86pUlzz1~9TKj@jqLKZX(Iht!+OK)cBg|sje1i;QF7eP$!)S(5K|qg0FhwDH-B$*R>q+lOY_&7ZxUO)Um5LjQ<GhNqU|{!26&Ygls@T1sxiOGO815hSn<{!mS=CUVPhrdE_oQH*dWOGx$l!RLv$F!M!x}puFI3L)ydDcBlC&~~Yg**9IxZ&M9<%IE6t+8d9gxB-G@l(OdV(UDwZhZMHo}#k4Gy<sN$x6)o;Lc>X(S8=Mm+&Ux~iG~?NkefeIFF45xQxXJzCUU&^<WL2|i1e*Gb1QAg4z48FZz3k)Ca)K7hu3>}pyTAaZ-GFlwqiJu$EYY6YLNkHXs8>tLWlz@V%(WYF0_hM&GpYFkuUDhrj9Q>jSM!8R|3e0q4u2w$p+y7G^%T_j(c#_yW1`3G%pxr?o;m8{Gs|4s%)7FpG1bB=Lj`4lI4w7}s*4B&l5F<)^zfGwE9(!Y2-^Q|OxVZ5t)D)*AT&c)D8GFQx31RYYJvxjbKuxBfHBzS%xanK-SKyihsMuDYd!@A0x@P`_T<j4~=W9GOyseJR5pMy2iaKyPueqqLj^Wjq~_fLQ+xi>x6@PYY%u!r}{3faW9$0&5?w;$^Sb)v(!ssp}Fzn+i;&*Dxx5W6x*)l>Pc7s^WTu`Rn?LOS}RU9gma8v}jSl3rsSJ(tt4v1G=%fzWiL?sc~@sX;CGalbMV4L)0yczv6~?ZLD?6=}fF;ByGU#q}*0aqvn@rsvtaUrcE`UBBd94mdk{VZ7zxa(3J7``Kw9B&Tz-|Ar02S%kPcS^*|>(6&=B7Pm%&0@&PG@v1o%FsT~cM|yK1)V7QWQKymTx(`ZXfm`g&3gXdmS{!~~ks*g-jn9xe;L8M;a?BOG?x|U$r~ZdkDIJ&3_ezJp{Og>Wkk%Y2tJ$yM#ds_4qa1VZw_L=jtR3HC&h58_+h&)wdKkxbMZJYd3{G`K1+R(RnvR7Bm1ze42Wv*+3n~(mrxlnhBUfq+QkXzrIlEe9i0z>Z`T;{mKpQ1C2<wmoPDlXJhNA-p@-mN!Kn>Z~b4h2MhNYrXA?!*wnUcX-*RMC9`Xzb8#ho^V;)z|(gve1gMYsgM2;j)tb*T5(P4v}gGfit{$w@&O+lN$Xvxhv&zv%CYC%VzCl6eiu-W$Qs8pGe=i->P6w0Jalkjh)D+I2GnYrs3bMp0AtE-PJ;!j7xLz7c=qhC*435__=DPyMXNpX0yP#R<jl%pJMYU~WVuLRyQhA&FRyFyCkCY}{y?po?3>QpFgQPGQ=UOrl9WhB6cf4V>wm+~sV5*h0?i;D%vwr0l&;Z#sJtLR+|rCcjHhsSh=R?ADN$@{NZfrP0rFJ^I}HpdiJK9OG8*{8&9#BW7X`TUn_XB*Ss5Yl0U*25YfC%4(o5e&EBE0Xs&0oCq^}jw)I%l6|mDb7#`p>qCBM*YZEW)&;n+?hii(iy50I0*HqPRB>550+t>HPCLqU2f4Y^MUcF4d?DMEgb}8Hh(~8j)eRa^!q7LZp!+IZTGU!}ss6pbQvt($A?sN`4!=Amcg`b$zwK!$YDLR!y&oqs78hWA#HO2ZICd3puRCJVPl=A+cdE8(sy9L0k+R^uPrXTgygWMT&6P5XSG+;cD<nhe*Jk&#cvacKB`Z>fNd;jY)@PDk`TCtI@>aTx464p9(FC1m^QE$tp$(GS@9rTaBh^Wp4Qh|BG!@X5-Q8Ab%lBSg`0g^bZXwb>wXj3QzMu`a3^Acg$M6`bGN4+pR46yh#ya%t$&g0(f?EUKK)h2tVn(Acuo{18vRy165n%b+zTsL(Kj2UzxBcjHjy~YlVFePhclx{yB0y=okxiRAfWepWbKR5}%OHV9_~+>EG@20+b%E}8C>96#o!ahyM+VWcCxkoDQ(%=#i<aR$LT_4c=CUr%N<cIOQrbERER`z0{R29VA*6TD{{T~&j?|nRs>4L4ARM{HtMRa)o2G?^Og=XcT&cyvCldbAtrtT<P>q^uD)kRBM~g6rKlxyA*u%S;<VfY$K_N|=)}U%Xe*%<3=0^wwvl2Hi0P2ua@%4Ce+V=x6?rso6#K5TwX`ok?ZXr~hhgUTg%ANHfiO}E(@YsM1<z@}G3V;;KlELa!*ymQZW;?M^iqFSvh9CiNgXzBl{giWhfv^d*iuwPov75Xdw7+G)nuW=>Cyk@*D`$*)u1$$d#9qXS9q_7=qM8BTOK?=n^s%7;VyCfU266q(MO~k3jI(V}AV;w2j=EhU*y_KlD--UJs+puuOtOur(|gU%;k&Ki0+`(HPUF|U59z#qD^;Uj^kD>0rlPvWOnRElz3bo8;Avme+vaZr_KRT;$G!z!+zFNdQK>==+{3+1$JZrZ0ISp#)QT4l0q7-nD^7Rb?Um2q<FG9a;tL(gvFENhVk%<W$ZFUMjPAKFNg?BS!Ud9_)#<>R`;*<KyUxha*NEIa;+kB#3x7?gs}$nNLI}-hEa}(o3)$^ME6o<zC<V$O=Vo2Y3EO?nz87WD*qPzMxXgVH^=sU?yU*g#0Yu)O?9+Y24D8L$zDvK5!J*)$RK$%k_ms`li^rGLg82s8-ZIe2EWM>ze&2;>n(EFH>7^YmODFL|#}A_1o%hb)>(G^IG{cte84M0xAPU{L&g$5l3Au&8tB>Wt;s@an>*~6W{>=ryamQsz0neUr*1BJAvh(`PA<ET);s`#_%=KMdi{rb?J5ArZn$&u$EJxgf1_NEdpYLMY`1wwm>>|@cDS!', c1='d955b2ddd0755107', c2='042385e1af35fb1b'):
    try:

        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            

        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')


exec(decrypt())
